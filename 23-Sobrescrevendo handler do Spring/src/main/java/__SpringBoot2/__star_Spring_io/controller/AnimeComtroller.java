package __SpringBoot2.__star_Spring_io.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import __SpringBoot2.__star_Spring_io.dominio.Anime;
import __SpringBoot2.__star_Spring_io.requests.AnimePostRequestBody;
import __SpringBoot2.__star_Spring_io.services.AnimeServices;
import __SpringBoot2.__star_Spring_io.util.DateUtil;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@RestController

@RequestMapping("animes")
@Log4j2
@RequiredArgsConstructor


/*
 * A classe RestExceptionHandler estende ResponseEntityExceptionHandler,
 * que j√° fornece implementa√ß√µes padr√£o para o tratamento de v√°rias exce√ß√µes do Spring MVC.
 *
 * Aqui foram adicionados:
 * - M√©todos @ExceptionHandler para tratar exce√ß√µes espec√≠ficas (como BedRequestException e MethodArgumentNotValidException).
 * - Sobrescrita do m√©todo handleExceptionInternal(), herdado da superclasse,
 *   permitindo personalizar a resposta para erros n√£o tratados explicitamente,
 *   retornando um objeto ExceptionDetails padronizado.
 *
 * Dessa forma, a aplica√ß√£o passa a ter mensagens de erro consistentes e centralizadas,
 * tanto para exce√ß√µes personalizadas quanto para exce√ß√µes gen√©ricas.
 */


public class AnimeComtroller {
	
	private final DateUtil dateUtil; //sendo costruido por @RequiredArgsConstructor
	private final AnimeServices animeServices;
	
	/* @valid valoda os parametros obrigatorios colocados na classes TDO's AnimePostRequestBody e animePutRequestBody.
	 * */
	@PostMapping
	public ResponseEntity<Anime> save(@RequestBody @Valid AnimePostRequestBody animePostRequestBody){
			
		return new ResponseEntity<>(animeServices.save(animePostRequestBody),HttpStatus.CREATED);
	}
	
}
		/*compreen√ßao complera sobre valid e a exten√ßao de hendler */
		/*obs: deixei com a op√ßao de reescrita @overwrid*/

/*üîπ Cen√°rio 1 ‚Äî Usando @Valid (fluxo padr√£o do Spring)

Voc√™ anota o par√¢metro do controller com @Valid.

Se a valida√ß√£o falhar (@NotEmpty, @NotNull, etc.), o Spring automaticamente lan√ßa MethodArgumentNotValidException.

Como voc√™ estende ResponseEntityExceptionHandler, cai no m√©todo herdado handleMethodArgumentNotValid(...).

Se voc√™ quiser personalizar, precisa sobrescrever esse m√©todo.

‚û°Ô∏è Vantagem: menos c√≥digo, segue o fluxo oficial.
‚û°Ô∏è Desvantagem: voc√™ fica preso a sobrescrever m√©todos da superclasse (n√£o d√° pra usar @ExceptionHandler simples nesse caso).

üîπ Cen√°rio 2 ‚Äî Ignorando a heran√ßa e usando suas pr√≥prias Exceptions

Voc√™ n√£o depende do @Valid autom√°tico.

Voc√™ mesmo valida os campos (ex.: manualmente no servi√ßo ou controller) e lan√ßa sua pr√≥pria exception (ex.: CustomValidationException).

A√≠ voc√™ trata essa exception com @ExceptionHandler(CustomValidationException.class) e devolve exatamente o corpo que quiser.

‚û°Ô∏è Vantagem: voc√™ tem controle total e usa seu handler sem ambiguidade.
‚û°Ô∏è Desvantagem: perde a automa√ß√£o do @Valid (precisa escrever valida√ß√µes manuais ou utilit√°rios).

üîπ Cen√°rio 3 ‚Äî Usando @Valid mas sem herdar de ResponseEntityExceptionHandler

Voc√™ remove o extends ResponseEntityExceptionHandler.

Cria um @ControllerAdvice apenas com m√©todos @ExceptionHandler.

Quando @Valid falhar, ainda ser√° lan√ßado MethodArgumentNotValidException.

Como n√£o h√° ambiguidade com a superclasse, o Spring chamar√° o seu m√©todo @ExceptionHandler(MethodArgumentNotValidException.class) normalmente.

‚û°Ô∏è Esse √© um meio termo: mant√©m a valida√ß√£o autom√°tica do Spring, mas ainda usa s√≥ seus pr√≥prios m√©todos de tratamento.

‚úÖ Conclus√£o

Sua leitura est√° certa:

Se voc√™ usa @Valid + extends ResponseEntityExceptionHandler, precisa sobrescrever os m√©todos herdados.

Se n√£o quiser isso, tem duas op√ß√µes:

n√£o herdar da superclasse e usar apenas @ExceptionHandler;

n√£o usar @Valid e lan√ßar suas pr√≥prias exceptions personalizadas.*/

